// To compile this, execute
// protoc --go_out=. gamedata.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.3
// source: gamedata.proto

package qrpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CardSuit is the suit of cards shown on the badge that can sometimes
// be used as question clues.
type CardSuit int32

const (
	CardSuit_CARD_SUIT_UNSPECIFIED CardSuit = 0
	CardSuit_SPADES                CardSuit = 1
	CardSuit_HEARTS                CardSuit = 2
	CardSuit_CLUBS                 CardSuit = 3
	CardSuit_DIAMONDS              CardSuit = 4
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "CARD_SUIT_UNSPECIFIED",
		1: "SPADES",
		2: "HEARTS",
		3: "CLUBS",
		4: "DIAMONDS",
	}
	CardSuit_value = map[string]int32{
		"CARD_SUIT_UNSPECIFIED": 0,
		"SPADES":                1,
		"HEARTS":                2,
		"CLUBS":                 3,
		"DIAMONDS":              4,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_gamedata_proto_enumTypes[0].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_gamedata_proto_enumTypes[0]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{0}
}

type GQType int32

const (
	GQType_GQTYPE_UNSPECIFIED GQType = 0
	GQType_USERNAME_LIST      GQType = 1
	GQType_SURVEY_ANS         GQType = 2
	GQType_ANY_PERSON         GQType = 3
)

// Enum value maps for GQType.
var (
	GQType_name = map[int32]string{
		0: "GQTYPE_UNSPECIFIED",
		1: "USERNAME_LIST",
		2: "SURVEY_ANS",
		3: "ANY_PERSON",
	}
	GQType_value = map[string]int32{
		"GQTYPE_UNSPECIFIED": 0,
		"USERNAME_LIST":      1,
		"SURVEY_ANS":         2,
		"ANY_PERSON":         3,
	}
)

func (x GQType) Enum() *GQType {
	p := new(GQType)
	*p = x
	return p
}

func (x GQType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GQType) Descriptor() protoreflect.EnumDescriptor {
	return file_gamedata_proto_enumTypes[1].Descriptor()
}

func (GQType) Type() protoreflect.EnumType {
	return &file_gamedata_proto_enumTypes[1]
}

func (x GQType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GQType.Descriptor instead.
func (GQType) EnumDescriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{1}
}

type SurveyType int32

const (
	SurveyType_SURVEY_TYPE_UNSPECIFIED SurveyType = 0
	SurveyType_BOOLEAN                 SurveyType = 1
)

// Enum value maps for SurveyType.
var (
	SurveyType_name = map[int32]string{
		0: "SURVEY_TYPE_UNSPECIFIED",
		1: "BOOLEAN",
	}
	SurveyType_value = map[string]int32{
		"SURVEY_TYPE_UNSPECIFIED": 0,
		"BOOLEAN":                 1,
	}
)

func (x SurveyType) Enum() *SurveyType {
	p := new(SurveyType)
	*p = x
	return p
}

func (x SurveyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SurveyType) Descriptor() protoreflect.EnumDescriptor {
	return file_gamedata_proto_enumTypes[2].Descriptor()
}

func (SurveyType) Type() protoreflect.EnumType {
	return &file_gamedata_proto_enumTypes[2]
}

func (x SurveyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SurveyType.Descriptor instead.
func (SurveyType) EnumDescriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{2}
}

type ActionLog_ActionType int32

const (
	ActionLog_ACTION_UNSPECIFIED ActionLog_ActionType = 0
	ActionLog_ACTION_CODE_SCAN   ActionLog_ActionType = 1
)

// Enum value maps for ActionLog_ActionType.
var (
	ActionLog_ActionType_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "ACTION_CODE_SCAN",
	}
	ActionLog_ActionType_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"ACTION_CODE_SCAN":   1,
	}
)

func (x ActionLog_ActionType) Enum() *ActionLog_ActionType {
	p := new(ActionLog_ActionType)
	*p = x
	return p
}

func (x ActionLog_ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionLog_ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_gamedata_proto_enumTypes[3].Descriptor()
}

func (ActionLog_ActionType) Type() protoreflect.EnumType {
	return &file_gamedata_proto_enumTypes[3]
}

func (x ActionLog_ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionLog_ActionType.Descriptor instead.
func (ActionLog_ActionType) EnumDescriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{4, 0}
}

type ActionLog_ActionResult int32

const (
	ActionLog_RESULT_UNSPECIFIED        ActionLog_ActionResult = 0
	ActionLog_RESULT_PROGRESS           ActionLog_ActionResult = 1
	ActionLog_RESULT_LOST_LIFE          ActionLog_ActionResult = 2
	ActionLog_RESULT_ALREADY_VICTORIOUS ActionLog_ActionResult = 3
	ActionLog_RESULT_ALREADY_DEAD       ActionLog_ActionResult = 4
	ActionLog_RESULT_GRABBED_METAL      ActionLog_ActionResult = 5
	ActionLog_RESULT_NO_GRABBED_METAL   ActionLog_ActionResult = 6
)

// Enum value maps for ActionLog_ActionResult.
var (
	ActionLog_ActionResult_name = map[int32]string{
		0: "RESULT_UNSPECIFIED",
		1: "RESULT_PROGRESS",
		2: "RESULT_LOST_LIFE",
		3: "RESULT_ALREADY_VICTORIOUS",
		4: "RESULT_ALREADY_DEAD",
		5: "RESULT_GRABBED_METAL",
		6: "RESULT_NO_GRABBED_METAL",
	}
	ActionLog_ActionResult_value = map[string]int32{
		"RESULT_UNSPECIFIED":        0,
		"RESULT_PROGRESS":           1,
		"RESULT_LOST_LIFE":          2,
		"RESULT_ALREADY_VICTORIOUS": 3,
		"RESULT_ALREADY_DEAD":       4,
		"RESULT_GRABBED_METAL":      5,
		"RESULT_NO_GRABBED_METAL":   6,
	}
)

func (x ActionLog_ActionResult) Enum() *ActionLog_ActionResult {
	p := new(ActionLog_ActionResult)
	*p = x
	return p
}

func (x ActionLog_ActionResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionLog_ActionResult) Descriptor() protoreflect.EnumDescriptor {
	return file_gamedata_proto_enumTypes[4].Descriptor()
}

func (ActionLog_ActionResult) Type() protoreflect.EnumType {
	return &file_gamedata_proto_enumTypes[4]
}

func (x ActionLog_ActionResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionLog_ActionResult.Descriptor instead.
func (ActionLog_ActionResult) EnumDescriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{4, 1}
}

// GUser represents a player who has signed up for the game and
// submitted answers to the survey.
type GUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username      *string         `protobuf:"bytes,3,opt,name=username,proto3,oneof" json:"username,omitempty"`
	Name          *string         `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	SurveyAnswers []*SurveyAnswer `protobuf:"bytes,4,rep,name=survey_answers,json=surveyAnswers,proto3" json:"survey_answers,omitempty"`
}

func (x *GUser) Reset() {
	*x = GUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GUser) ProtoMessage() {}

func (x *GUser) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GUser.ProtoReflect.Descriptor instead.
func (*GUser) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{0}
}

func (x *GUser) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *GUser) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *GUser) GetSurveyAnswers() []*SurveyAnswer {
	if x != nil {
		return x.SurveyAnswers
	}
	return nil
}

// QRMapping is an entry that associates a player with various properties,
// like their name, username, and card suit. This is set by the game organizer.
type QRMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// username must be unique, as it is used to indicate which people
	// are answers to a GameQuestion.
	Username *string `protobuf:"bytes,1,opt,name=username,proto3,oneof" json:"username,omitempty"`
	// display_name is used as a confirmation during signup and for
	// showing in the admin leaderboard.
	DisplayName *string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3,oneof" json:"display_name,omitempty"`
	// qrcode is the full decoded string from the qrcode, including the
	// leading URL.
	Qrcode *string `protobuf:"bytes,3,opt,name=qrcode,proto3,oneof" json:"qrcode,omitempty"`
	// Which card suit should be shown in the badge for this player.
	CardSuit *CardSuit `protobuf:"varint,4,opt,name=card_suit,json=cardSuit,proto3,enum=qrpb.CardSuit,oneof" json:"card_suit,omitempty"`
	// The face value of this card. Number 1 represents Ace, and numbers
	// 11 to 13 represent the face cards (J, Q, K).
	CardRank *int64 `protobuf:"varint,5,opt,name=card_rank,json=cardRank,proto3,oneof" json:"card_rank,omitempty"`
}

func (x *QRMapping) Reset() {
	*x = QRMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRMapping) ProtoMessage() {}

func (x *QRMapping) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRMapping.ProtoReflect.Descriptor instead.
func (*QRMapping) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{1}
}

func (x *QRMapping) GetUsername() string {
	if x != nil && x.Username != nil {
		return *x.Username
	}
	return ""
}

func (x *QRMapping) GetDisplayName() string {
	if x != nil && x.DisplayName != nil {
		return *x.DisplayName
	}
	return ""
}

func (x *QRMapping) GetQrcode() string {
	if x != nil && x.Qrcode != nil {
		return *x.Qrcode
	}
	return ""
}

func (x *QRMapping) GetCardSuit() CardSuit {
	if x != nil && x.CardSuit != nil {
		return *x.CardSuit
	}
	return CardSuit_CARD_SUIT_UNSPECIFIED
}

func (x *QRMapping) GetCardRank() int64 {
	if x != nil && x.CardRank != nil {
		return *x.CardRank
	}
	return 0
}

// A set of name associations.
type QRMappingSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QrMappings []*QRMapping `protobuf:"bytes,1,rep,name=qr_mappings,json=qrMappings,proto3" json:"qr_mappings,omitempty"`
}

func (x *QRMappingSet) Reset() {
	*x = QRMappingSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QRMappingSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QRMappingSet) ProtoMessage() {}

func (x *QRMappingSet) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QRMappingSet.ProtoReflect.Descriptor instead.
func (*QRMappingSet) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{2}
}

func (x *QRMappingSet) GetQrMappings() []*QRMapping {
	if x != nil {
		return x.QrMappings
	}
	return nil
}

// GameState is information about the current situation of the user
type GameState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserLevel *int64 `protobuf:"varint,1,opt,name=user_level,json=userLevel,proto3,oneof" json:"user_level,omitempty"`
	Life      *int64 `protobuf:"varint,2,opt,name=life,proto3,oneof" json:"life,omitempty"`
	HasAl     *bool  `protobuf:"varint,3,opt,name=has_al,json=hasAl,proto3,oneof" json:"has_al,omitempty"`
	HasCu     *bool  `protobuf:"varint,4,opt,name=has_cu,json=hasCu,proto3,oneof" json:"has_cu,omitempty"`
	HasSn     *bool  `protobuf:"varint,5,opt,name=has_sn,json=hasSn,proto3,oneof" json:"has_sn,omitempty"`
	HasZn     *bool  `protobuf:"varint,6,opt,name=has_zn,json=hasZn,proto3,oneof" json:"has_zn,omitempty"`
}

func (x *GameState) Reset() {
	*x = GameState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameState) ProtoMessage() {}

func (x *GameState) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameState.ProtoReflect.Descriptor instead.
func (*GameState) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{3}
}

func (x *GameState) GetUserLevel() int64 {
	if x != nil && x.UserLevel != nil {
		return *x.UserLevel
	}
	return 0
}

func (x *GameState) GetLife() int64 {
	if x != nil && x.Life != nil {
		return *x.Life
	}
	return 0
}

func (x *GameState) GetHasAl() bool {
	if x != nil && x.HasAl != nil {
		return *x.HasAl
	}
	return false
}

func (x *GameState) GetHasCu() bool {
	if x != nil && x.HasCu != nil {
		return *x.HasCu
	}
	return false
}

func (x *GameState) GetHasSn() bool {
	if x != nil && x.HasSn != nil {
		return *x.HasSn
	}
	return false
}

func (x *GameState) GetHasZn() bool {
	if x != nil && x.HasZn != nil {
		return *x.HasZn
	}
	return false
}

// ActionLog represents a single activity performed by a user
type ActionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimestampUsec *int64                  `protobuf:"varint,1,opt,name=timestamp_usec,json=timestampUsec,proto3,oneof" json:"timestamp_usec,omitempty"`
	ClueShortName *string                 `protobuf:"bytes,2,opt,name=clue_short_name,json=clueShortName,proto3,oneof" json:"clue_short_name,omitempty"`
	Type          *ActionLog_ActionType   `protobuf:"varint,3,opt,name=type,proto3,enum=qrpb.ActionLog_ActionType,oneof" json:"type,omitempty"`
	OldState      *GameState              `protobuf:"bytes,4,opt,name=old_state,json=oldState,proto3,oneof" json:"old_state,omitempty"`
	Result        *ActionLog_ActionResult `protobuf:"varint,5,opt,name=result,proto3,enum=qrpb.ActionLog_ActionResult,oneof" json:"result,omitempty"`
}

func (x *ActionLog) Reset() {
	*x = ActionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLog) ProtoMessage() {}

func (x *ActionLog) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLog.ProtoReflect.Descriptor instead.
func (*ActionLog) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{4}
}

func (x *ActionLog) GetTimestampUsec() int64 {
	if x != nil && x.TimestampUsec != nil {
		return *x.TimestampUsec
	}
	return 0
}

func (x *ActionLog) GetClueShortName() string {
	if x != nil && x.ClueShortName != nil {
		return *x.ClueShortName
	}
	return ""
}

func (x *ActionLog) GetType() ActionLog_ActionType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ActionLog_ACTION_UNSPECIFIED
}

func (x *ActionLog) GetOldState() *GameState {
	if x != nil {
		return x.OldState
	}
	return nil
}

func (x *ActionLog) GetResult() ActionLog_ActionResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return ActionLog_RESULT_UNSPECIFIED
}

// A game question, which is a numbered question with the HTML to show to the
// players. The answer could be a set of USERNAMEs or anyone who answered the
// survey question with the same boolean.
type GameQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId   *int64  `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3,oneof" json:"question_id,omitempty"`
	Type         *GQType `protobuf:"varint,2,opt,name=type,proto3,enum=qrpb.GQType,oneof" json:"type,omitempty"`
	QuestionHtml *string `protobuf:"bytes,3,opt,name=question_html,json=questionHtml,proto3,oneof" json:"question_html,omitempty"`
	// Valid answers. Only valid for type = USERNAME_LIST.
	AnsUsernames []string `protobuf:"bytes,4,rep,name=ans_usernames,json=ansUsernames,proto3" json:"ans_usernames,omitempty"`
	// Which Survey question is being referenced here? Only valid for type =
	// SURVEY_ANS.
	SurveyId *int64 `protobuf:"varint,5,opt,name=survey_id,json=surveyId,proto3,oneof" json:"survey_id,omitempty"`
	// Whether the correct answers are those who chose the 'true' option in the
	// survey.
	SurveyTrueIsCorrect *bool `protobuf:"varint,6,opt,name=survey_true_is_correct,json=surveyTrueIsCorrect,proto3,oneof" json:"survey_true_is_correct,omitempty"`
}

func (x *GameQuestion) Reset() {
	*x = GameQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameQuestion) ProtoMessage() {}

func (x *GameQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameQuestion.ProtoReflect.Descriptor instead.
func (*GameQuestion) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{5}
}

func (x *GameQuestion) GetQuestionId() int64 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *GameQuestion) GetType() GQType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return GQType_GQTYPE_UNSPECIFIED
}

func (x *GameQuestion) GetQuestionHtml() string {
	if x != nil && x.QuestionHtml != nil {
		return *x.QuestionHtml
	}
	return ""
}

func (x *GameQuestion) GetAnsUsernames() []string {
	if x != nil {
		return x.AnsUsernames
	}
	return nil
}

func (x *GameQuestion) GetSurveyId() int64 {
	if x != nil && x.SurveyId != nil {
		return *x.SurveyId
	}
	return 0
}

func (x *GameQuestion) GetSurveyTrueIsCorrect() bool {
	if x != nil && x.SurveyTrueIsCorrect != nil {
		return *x.SurveyTrueIsCorrect
	}
	return false
}

type GameQSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameQuestions []*GameQuestion `protobuf:"bytes,1,rep,name=game_questions,json=gameQuestions,proto3" json:"game_questions,omitempty"`
}

func (x *GameQSet) Reset() {
	*x = GameQSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameQSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameQSet) ProtoMessage() {}

func (x *GameQSet) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameQSet.ProtoReflect.Descriptor instead.
func (*GameQSet) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{6}
}

func (x *GameQSet) GetGameQuestions() []*GameQuestion {
	if x != nil {
		return x.GameQuestions
	}
	return nil
}

// A survey question shown at the beginning to the players (during signup).
type SurveyQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId   *int64      `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3,oneof" json:"question_id,omitempty"`
	QuestionText *string     `protobuf:"bytes,2,opt,name=question_text,json=questionText,proto3,oneof" json:"question_text,omitempty"`
	Type         *SurveyType `protobuf:"varint,3,opt,name=type,proto3,enum=qrpb.SurveyType,oneof" json:"type,omitempty"`
}

func (x *SurveyQuestion) Reset() {
	*x = SurveyQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyQuestion) ProtoMessage() {}

func (x *SurveyQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyQuestion.ProtoReflect.Descriptor instead.
func (*SurveyQuestion) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{7}
}

func (x *SurveyQuestion) GetQuestionId() int64 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *SurveyQuestion) GetQuestionText() string {
	if x != nil && x.QuestionText != nil {
		return *x.QuestionText
	}
	return ""
}

func (x *SurveyQuestion) GetType() SurveyType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SurveyType_SURVEY_TYPE_UNSPECIFIED
}

// Survey response to a single question.
type SurveyAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionId *int64 `protobuf:"varint,1,opt,name=question_id,json=questionId,proto3,oneof" json:"question_id,omitempty"`
	IsTrue     *bool  `protobuf:"varint,2,opt,name=is_true,json=isTrue,proto3,oneof" json:"is_true,omitempty"`
}

func (x *SurveyAnswer) Reset() {
	*x = SurveyAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveyAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveyAnswer) ProtoMessage() {}

func (x *SurveyAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveyAnswer.ProtoReflect.Descriptor instead.
func (*SurveyAnswer) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{8}
}

func (x *SurveyAnswer) GetQuestionId() int64 {
	if x != nil && x.QuestionId != nil {
		return *x.QuestionId
	}
	return 0
}

func (x *SurveyAnswer) GetIsTrue() bool {
	if x != nil && x.IsTrue != nil {
		return *x.IsTrue
	}
	return false
}

type SurveySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SurveyQuestions []*SurveyQuestion `protobuf:"bytes,1,rep,name=survey_questions,json=surveyQuestions,proto3" json:"survey_questions,omitempty"`
}

func (x *SurveySet) Reset() {
	*x = SurveySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gamedata_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SurveySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SurveySet) ProtoMessage() {}

func (x *SurveySet) ProtoReflect() protoreflect.Message {
	mi := &file_gamedata_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SurveySet.ProtoReflect.Descriptor instead.
func (*SurveySet) Descriptor() ([]byte, []int) {
	return file_gamedata_proto_rawDescGZIP(), []int{9}
}

func (x *SurveySet) GetSurveyQuestions() []*SurveyQuestion {
	if x != nil {
		return x.SurveyQuestions
	}
	return nil
}

var File_gamedata_proto protoreflect.FileDescriptor

var file_gamedata_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x04, 0x71, 0x72, 0x70, 0x62, 0x22, 0x98, 0x01, 0x0a, 0x05, 0x47, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0e, 0x73, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x0d, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10,
	0x02, 0x22, 0x8a, 0x02, 0x0a, 0x09, 0x51, 0x52, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x71, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x71, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75,
	0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x48, 0x03, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64,
	0x53, 0x75, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x72, 0x61, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08, 0x63, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x71, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x22, 0x40,
	0x0a, 0x0c, 0x51, 0x52, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x12, 0x30,
	0x0a, 0x0b, 0x71, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x51, 0x52, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x71, 0x72, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0xfc, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x04, 0x6c, 0x69, 0x66, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x68,
	0x61, 0x73, 0x5f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x68,
	0x61, 0x73, 0x41, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x63,
	0x75, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x05, 0x68, 0x61, 0x73, 0x43, 0x75,
	0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x05, 0x68, 0x61, 0x73, 0x53, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x7a, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x05, 0x68, 0x61, 0x73, 0x5a, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c,
	0x69, 0x66, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x61, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x63, 0x75, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x61,
	0x73, 0x5f, 0x73, 0x6e, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x7a, 0x6e, 0x22,
	0xcf, 0x04, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x2a, 0x0a,
	0x0e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x55, 0x73, 0x65, 0x63, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x63, 0x6c, 0x75,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x09, 0x6f,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48,
	0x03, 0x52, 0x08, 0x6f, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x04, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x22, 0x3a, 0x0a, 0x0a, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53,
	0x43, 0x41, 0x4e, 0x10, 0x01, 0x22, 0xc0, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4c, 0x4f,
	0x53, 0x54, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x56, 0x49, 0x43, 0x54,
	0x4f, 0x52, 0x49, 0x4f, 0x55, 0x53, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x45, 0x41, 0x44, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x42,
	0x42, 0x45, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x47, 0x52, 0x41, 0x42, 0x42, 0x45, 0x44,
	0x5f, 0x4d, 0x45, 0x54, 0x41, 0x4c, 0x10, 0x06, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x75, 0x73, 0x65, 0x63, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x63, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x6c, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0xda, 0x02, 0x0a, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x51,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x28, 0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x74, 0x6d, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x74, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x6e, 0x73,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x61, 0x6e, 0x73, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x09, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x03, 0x52, 0x08, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x16, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x5f,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x13, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x54, 0x72, 0x75, 0x65, 0x49, 0x73,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x74,
	0x72, 0x75, 0x65, 0x5f, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x22, 0x45,
	0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x51, 0x53, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x67, 0x61, 0x6d, 0x65, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x75,
	0x72, 0x76, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x6e,
	0x0a, 0x0c, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x06, 0x69, 0x73, 0x54, 0x72, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x75, 0x65, 0x22, 0x4c,
	0x0a, 0x09, 0x53, 0x75, 0x72, 0x76, 0x65, 0x79, 0x53, 0x65, 0x74, 0x12, 0x3f, 0x0a, 0x10, 0x73,
	0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x72, 0x70, 0x62, 0x2e, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2a, 0x56, 0x0a, 0x08,
	0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x52, 0x44,
	0x5f, 0x53, 0x55, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x50, 0x41, 0x44, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x48, 0x45, 0x41, 0x52, 0x54, 0x53, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x4c, 0x55, 0x42, 0x53, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x41, 0x4d, 0x4f, 0x4e,
	0x44, 0x53, 0x10, 0x04, 0x2a, 0x53, 0x0a, 0x06, 0x47, 0x51, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x47, 0x51, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x53, 0x45, 0x52, 0x4e, 0x41,
	0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x52,
	0x56, 0x45, 0x59, 0x5f, 0x41, 0x4e, 0x53, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x59,
	0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0x36, 0x0a, 0x0a, 0x53, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x55, 0x52, 0x56, 0x45,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x10,
	0x01, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x71, 0x72, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_gamedata_proto_rawDescOnce sync.Once
	file_gamedata_proto_rawDescData = file_gamedata_proto_rawDesc
)

func file_gamedata_proto_rawDescGZIP() []byte {
	file_gamedata_proto_rawDescOnce.Do(func() {
		file_gamedata_proto_rawDescData = protoimpl.X.CompressGZIP(file_gamedata_proto_rawDescData)
	})
	return file_gamedata_proto_rawDescData
}

var file_gamedata_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_gamedata_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_gamedata_proto_goTypes = []interface{}{
	(CardSuit)(0),               // 0: qrpb.CardSuit
	(GQType)(0),                 // 1: qrpb.GQType
	(SurveyType)(0),             // 2: qrpb.SurveyType
	(ActionLog_ActionType)(0),   // 3: qrpb.ActionLog.ActionType
	(ActionLog_ActionResult)(0), // 4: qrpb.ActionLog.ActionResult
	(*GUser)(nil),               // 5: qrpb.GUser
	(*QRMapping)(nil),           // 6: qrpb.QRMapping
	(*QRMappingSet)(nil),        // 7: qrpb.QRMappingSet
	(*GameState)(nil),           // 8: qrpb.GameState
	(*ActionLog)(nil),           // 9: qrpb.ActionLog
	(*GameQuestion)(nil),        // 10: qrpb.GameQuestion
	(*GameQSet)(nil),            // 11: qrpb.GameQSet
	(*SurveyQuestion)(nil),      // 12: qrpb.SurveyQuestion
	(*SurveyAnswer)(nil),        // 13: qrpb.SurveyAnswer
	(*SurveySet)(nil),           // 14: qrpb.SurveySet
}
var file_gamedata_proto_depIdxs = []int32{
	13, // 0: qrpb.GUser.survey_answers:type_name -> qrpb.SurveyAnswer
	0,  // 1: qrpb.QRMapping.card_suit:type_name -> qrpb.CardSuit
	6,  // 2: qrpb.QRMappingSet.qr_mappings:type_name -> qrpb.QRMapping
	3,  // 3: qrpb.ActionLog.type:type_name -> qrpb.ActionLog.ActionType
	8,  // 4: qrpb.ActionLog.old_state:type_name -> qrpb.GameState
	4,  // 5: qrpb.ActionLog.result:type_name -> qrpb.ActionLog.ActionResult
	1,  // 6: qrpb.GameQuestion.type:type_name -> qrpb.GQType
	10, // 7: qrpb.GameQSet.game_questions:type_name -> qrpb.GameQuestion
	2,  // 8: qrpb.SurveyQuestion.type:type_name -> qrpb.SurveyType
	12, // 9: qrpb.SurveySet.survey_questions:type_name -> qrpb.SurveyQuestion
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_gamedata_proto_init() }
func file_gamedata_proto_init() {
	if File_gamedata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gamedata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QRMappingSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameQSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveyAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gamedata_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SurveySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_gamedata_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_gamedata_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_gamedata_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_gamedata_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_gamedata_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_gamedata_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_gamedata_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gamedata_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gamedata_proto_goTypes,
		DependencyIndexes: file_gamedata_proto_depIdxs,
		EnumInfos:         file_gamedata_proto_enumTypes,
		MessageInfos:      file_gamedata_proto_msgTypes,
	}.Build()
	File_gamedata_proto = out.File
	file_gamedata_proto_rawDesc = nil
	file_gamedata_proto_goTypes = nil
	file_gamedata_proto_depIdxs = nil
}
